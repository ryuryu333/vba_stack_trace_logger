@startuml Class Diagram
title VBA Stack Trace Logger Class Diagram

' ====== Discription ======
' === Overview ===
' This logger is designed to provide log output including call stack information.
' This logger is provided as an add-in with a simple API,
' allowing users to easily output logs.

' === Design Philosophy ===
' The design philosophy is to prioritize maintainability and extensibility.
' It uses interfaces extensively and employs dependency injection to facilitate unit testing.
' The logger is designed to be used in complex projects and OSS, where maintainability is crucial.

' === NOTE ===
' All classes are set to instancing = 1 - Private.
' Modules are specified as Option Private Module except for the minimum necessary ones.


' ====== Class / Module ======
' Public module, user can access.
class Logger_EntryPoint << (M,66CCFF) Module >> #LightBlue ##black {
    - mLogger : Logger_Facade
    --
    + MyLogger() : Logger_Facade
    
    ==
    This module set **PUBLIC** access level, and use **SINGLETON** pattern. 
    User call MyLogger() **DIRECTLY**, then always obtain the **SAME INSTANCE**.
    User use logger by calling MyLogger's methods.
    **e.g. MyLogger.Log "Message"**
}

' Logger API
' NOTE : All controller classes have EnsureInitialized() method.
'        This is to ensure that the initialization process has been carried out after instantinate.
'        As a VBA specification, there are no constructors with arguments...
class Logger_Facade {
    - mIsInitialized : Boolean
    - mController : Logger_IController
    - EnsureInitialized()
    + StartConfiguration() : Logger_ConfigBuilder
    + Log(writeMessage, Optional LoggerLogTag)
    + UsingTracer(ModuleName, ProcedureName) : Logger_ProcedureTracer
    + Terminate()

    ==
    User must be initialized before use.
    If not initialized, call **Err.Raise**.
}

' Logger main logic
' e.g. "Logger_Facade.log" call "Logger_Controller.WriteLog"
class Logger_Controller implements Logger_IController, Logger_ITraceLogOutput, Logger_IConfigReceiver {
    - mStackTraceController : Logger_IStackTraceFacade
    - mWriteLogController : Logger_IWriteLogController
    - mOutputFilter : Logger_IOutputFilter
    - mLoggerConfig : Logger_ConfigurationDTO
    - mIsInitialized : Boolean
    - EnsureInitialized()
}
interface Logger_IController {
    + WriteLog(writeMessage, LoggerLogTag)
    + UsingTracer(ModuleName, ProcedureName) : Logger_ProcedureTracer
    + Terminate()
}
interface Logger_IConfigReceiver {
    + Initialize(Logger_ConfigurationDTO)
}
interface Logger_ITraceLogOutput {
    + WriteTraceLog(writeMessage, LoggerLogTag)
}

' Output filtering
' Separated in anticipation of expanded functionality
class Logger_OutputFilter implements Logger_IOutputFilter {
    ==
    Separated in anticipation of expanded functionality.
}
interface Logger_IOutputFilter {
    + ShouldWriteLog(LoggerLogTag, Logger_ConfigurationDTO) : Boolean
}

' Create writers
class Logger_WriterFactory implements Logger_IWriterFactory {
    ==
    Separated in anticipation of expanded functionality.
}
interface Logger_IWriterFactory {
    + CreateWriters(Logger_ConfigurationDTO) : Collection
}

package "Log Writers" {
    ' Strategy pattern
    interface Logger_ILogWriter {
        + Initialize()
        + WriteLog(Logger_LogWriteRequestDTO)
        + Terminate()
    }
    class Logger_Writer_Excel implements Logger_ILogWriter {
        - mOutputSheet : Worksheet
        - mCurrentRow : Long
        + SetTargetSheet(Worksheet)
    }
    class Logger_Writer_Immediate implements Logger_ILogWriter {
    }
}

' Writer logic - extracted from Controller
class Logger_WriteLogController implements Logger_IWriteLogController {
    - mWriters : Collection
    - mLogMetadataProvider : Logger_ILogMetadataProvider
}
interface Logger_IWriteLogController {
    + Initialize(Collection Writers)
    + WriteLogToAll(writeMessage, LoggerLogTag, callPath)
    + Terminate()
}

' Metadata provider for log information
class Logger_LogMetadataProvider implements Logger_ILogMetadataProvider {
    ==
    WindowsAPI is used to get the time.
    It is separated because it is complicated.
}
interface Logger_ILogMetadataProvider {
    + GetTimeStamp() : String
    + GetTagName(LoggerLogTag) : String
}

' Write by WriteLogController and Logger_LogMetadataProvider, read by WriterManager
class Logger_LogWriteRequestDTO {
    - pMessage : String
    - pTagType : LoggerLogTag
    - pTagName : String
    - pTimestamp : String
    - pIsStackTraceEnabled : Boolean
    - pCallPath : String
    --
    ~ Setter()
    ~ Getter()
}

' User start initialization through Logger_Facade.Initialize
' Continue configuration through Logger_ConfigBuilder.
' Setting up configuration and initialization process in
' a single line using method chaining.
' e.g. MyLogger.StartConfiguration.EnabledStckTrace.Build
package "Config Builders" {
    ' Main builder
    class Logger_ConfigBuilder implements Logger_IConfigBuilder {
        - mConfig : Logger_ConfigurationDTO
        - mReceiver: Logger_IConfigReceiver
        - mIsBuilt : Boolean
        --
        + DisableLogging() : Logger_ConfigBuilder
        + EnableTagFiltering() : Logger_TagFilterBuilder
        ~ SetExcludedTags()
        + EnableStackTrace() : Logger_ConfigBuilder
        + DisableWriteToImmediate() : Logger_ConfigBuilder
        + EnableWriteToExcelSheet() : Logger_ExcelOutputBuilder
        ~ SetOutputExcelSheet()

        + Build()
        - EnsureBuild()

        ==
        Setting logger configuration via builder pattern.
        If user do **NOT** call Build(), call **Err.Raise**.
        e.g. MyLogger.StartConfiguration.EnabledStckTrace.Build
    }
    interface Logger_IConfigBuilder {
        + Initialize(Logger_IConfigReceiver)
    }
    ' Sub builders
    class Logger_ExcelOutputBuilder {
        - mParentBuilder
        - mIsApplied : Boolean
        - EnsureApply()
        --
        ~ SetParentBuilder(Logger_ConfigBuilder)
        + SetOutputExcelSheet(Worksheet) : Logger_ConfigBuilder
        
        ==
        When user call "EnableWriteToExcelSheet()",
        next chain is only "SetOutputExcelSheet()".
        If user **stop** chain, call **Err.Raise**.
    }
    class Logger_TagFilterBuilder {
        - mParentBuilder
        - mTags : LoggerLogTag Array
        - mCount : Long
        - mIsAdded : Boolean
        - mIsApplied : Boolean
        --
        ~ SetParentBuilder(Logger_ConfigBuilder)
        + Add(LoggerLogTag) : Logger_TagFilterBuilder
        + Apply() : Logger_ConfigBuilder
        - EnsureAdd()
        - EnsureApply()

        ==
        If user do **NOT** call Apply(), call **Err.Raise**.
        If user do **NOT** call Add() **before** Apply(), call **Err.Raise**.
    }
}

' Write by builders, read by Controller
class Logger_ConfigurationDTO {
    - pIsLoggingEnabled : Boolean
    - pIsTagFilteringEnabled : Boolean
    - pExcludedTags : LoggerLogTag Array
    - pIsStackTraceEnabled : Boolean
    - pIsWriteToImmediate : Boolean
    - pIsWriteToExcelSheet : Boolean
    - pOutputExcelSheet : Worksheet
    --
    ~ Setter()
    ~ Getter()
    ~ Validate()
}

package "StackTrace" {
    ' Stack trace management - extracted from Controller
    class Logger_StackTraceController implements Logger_IStackTraceFacade, Logger_IStackTraceEventHandler {
        - mCallStack : Logger_ICallStack
        - mTraceLogOutput : Logger_ITraceLogOutput
        - mIsStackTraceEnabled : Boolean
        - mIsInitialized : Boolean
        --
        - CreateTracer(ModuleName, ProcedureName) : Logger_ProcedureTracer
        - EnsureInitialized()

        ==
        Tracer is created to detect the start and end of a procedure.
        If stack trace is **DISABLED, returns Nothing**.
    }
    interface Logger_IStackTraceFacade  {
        + Initialize(IsStackTraceEnabled, Logger_ITraceLogOutput)
        + UsingTracer(ModuleName, ProcedureName) : Logger_ProcedureTracer
        + GetCurrentCallPath() : String
        + Terminate()
    }
    interface Logger_IStackTraceEventHandler {
        + OnProcedureEnter(callSite As String)
        + OnProcedureExit()
    }
    ' Store and update call stack information
    class Logger_CallStack implements Logger_ICallStack {
        - mCallNestLevel : Long
        - mCallSite : Collection
        - mCallPath : Collection
        - ValidateCallStack()
    }
    interface Logger_ICallStack {
        + EnterProcedure(callSite As String)
        + ExitProcedure()
        + GetCurrentCallPath() : String
    }
    ' Automatically tracks procedure entry and exit
    ' NOTE : This is based on the RAII (Resource Acquisition Is Initialization) concept.
    '        User stores an instance of this class as a variable at the beginning of the procedure.
    '        e.g. Dim scopeGuard Variant: Set scopeGuard = MyLogger.UsingTracer("ModuleName", "ProcedureName")
    '        By calling UsingTracer(), the instance is created and initialized internally.
    '         -> At that time (= constructor), this class notifies the start-of-procedure event.
    '        When the user's procedure ends, the reference to the variable drops to zero,
    '        and the variable is automatically destroyed by the system.
    '         -> At that time (= destructor), this class notifies the end-of-procedure event.
    class Logger_ProcedureTracer {
        - mCallSite : String
        - mStackTraceEventHandler : Logger_IStackTraceEventHandler
        - mIsInitialized : Boolean
        + Initialize(ModuleName, ProcedureName
        , Logger_IStackTraceEventHandler)
        - Class_Terminate()

        ==
        **Just declare** at the top of a procedure.
        **Automatically tracks start and end (like RAII).**
        e.g. Dim scopeGuard = MyLogger.UsingTracer
                        ("ModuleName", "ProcedureName")
    }
}

' ====== relationship ======
' === API ===
' Note: User --> Logger_EntryPoint : call MyLogger & get Facade
Logger_EntryPoint --> Logger_Facade : instantiate
' === Logger Initilize & build config ===
Logger_Facade --> Logger_IConfigBuilder : start the builder method chain
Logger_ConfigBuilder --> Logger_ConfigurationDTO : create & write config & call validate
Logger_ConfigBuilder --> Logger_IConfigReceiver : call buck to receiver
' Main builder
Logger_ConfigBuilder --> Logger_ExcelOutputBuilder : set enabled
Logger_ConfigBuilder --> Logger_TagFilterBuilder : set enabled
Logger_ConfigBuilder --> Logger_ConfigBuilder : set value \n return main builder
' Sub builders
Logger_ExcelOutputBuilder --> Logger_ExcelOutputBuilder : set output sheet
Logger_ExcelOutputBuilder --> Logger_ConfigBuilder : set value \n return main builder
Logger_TagFilterBuilder --> Logger_TagFilterBuilder : create \n tags array
Logger_TagFilterBuilder --> Logger_ConfigBuilder : set value \n rreturn main builder
' === Core Logic ===
Logger_Facade -----> Logger_IController : instantiate \n relay the user's commands
Logger_Controller --> Logger_ConfigurationDTO : read config
Logger_Controller --> Logger_IWriterFactory
Logger_Controller --> Logger_IOutputFilter
Logger_OutputFilter --> Logger_ConfigurationDTO : read config
Logger_Controller --> Logger_IStackTraceFacade : delegate stack trace logic
Logger_Controller --> Logger_IWriteLogController : delegate write logic
' === Write ===
' Factory
Logger_WriterFactory --> Logger_ConfigurationDTO : read comfig
Logger_WriterFactory --> Logger_ILogWriter : create
' Log info construction
Logger_WriteLogController --> Logger_LogWriteRequestDTO : create & write log info
Logger_WriteLogController --> Logger_ILogMetadataProvider
' Writers
Logger_WriteLogController --> Logger_ILogWriter : use
Logger_Writer_Excel --> Logger_LogWriteRequestDTO : read log info
Logger_Writer_Immediate --> Logger_LogWriteRequestDTO : read log info
' === stack trace ===
Logger_StackTraceController --> Logger_ITraceLogOutput : logging \n on procedure entry / exit
Logger_StackTraceController --> Logger_ICallStack : update call stack \n on procedure entry / exit  
Logger_StackTraceController --> Logger_ProcedureTracer : create
Logger_ProcedureTracer --> Logger_IStackTraceEventHandler


remove @unlinked
' ===  hidden classes ===

' Private module, user cannot access
class Logger_Constants << (M,66CCFF) Module >> {
    + ERR_VBA_STACK_TRACE_LOGGER : Long
    + LOGGER_NAMESPACE : String
    + LOGGER_VERSION : String
    + LOGGER_BUILD_DATE : String
    + LOGGER_AUTHOR : String
}

' Public module, user can access
class Logger_DataStruct << (M,66CCFF) Module >> #LightBlue ##black {
    ' Use for logging.
    ' e.g. MyLogger.Log "Message", LogTag_Debug
    Enum LoggerLogTag {
        LogTag_Debug = 0
        LogTag_Info = 1
        LogTag_Warning = 2
        LogTag_Error = 3
        LogTag_Critical = 4
        LogTag_Trace = 5
    }
}

@enduml
