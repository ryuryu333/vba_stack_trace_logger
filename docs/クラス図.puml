@startuml Class Diagram
title VBA Stack Trace Logger Class Diagram

' User use logger through Logger_EntryPoint.MyLogger
' e.g. MyLogger.Log "Message"
class Logger_EntryPoint << (M,66CCFF) Module >> #LightBlue ##black {
    + MyLogger() : Logger_Facade
}

class Logger_SingletonManager << (M,66CCFF) Module >> {
    - mLogger : Logger_Facade
}

' Logger API
class Logger_Facade {
    + Initialize()
    + Log()
    + UsingTracer()
    + Terminate()
    + Reset()
}

Logger_EntryPoint -> Logger_SingletonManager : get Facade
Logger_SingletonManager --> Logger_Facade : instantinate

' Logger main logic
' e.g. "Logger_Facade.log" call "Logger_Controller.WriteLog"
class Logger_Controller {
    - Initialize()
    - WriteLog()
    - Terminate()
}

Logger_Facade ---> Logger_Controller : uses

' User initialize logger through Logger_Facade.Initialize
' Setting values are defined through builders
' e.g. MyLogger.Initialize.EnabledStckTrace.Build
package "Config Builders" {
    ' Main builder
    class Logger_ConfigBuilder {
    }
    ' Sub builders
    ' When user call "Logger_ConfigBuilder.EnableWriteToExcelSheet",
    ' next chain is only "Logger_ExcelOutputBuilder.SetOutputExcelSheet"
    class Logger_ExcelOutputBuilder {
    }
    class Logger_TagFilterBuilder {
    }
}

Logger_Facade::Initialize ----> Logger_ConfigBuilder : set config \n via builder \n method chain \n finally retrun Facade

Logger_ConfigBuilder --> Logger_ExcelOutputBuilder : set enabled
Logger_ExcelOutputBuilder --> Logger_ExcelOutputBuilder : set output sheet
Logger_ExcelOutputBuilder --> Logger_ConfigBuilder : return main builder

Logger_ConfigBuilder --> Logger_TagFilterBuilder : set enabled
Logger_TagFilterBuilder --> Logger_TagFilterBuilder : set filter tags
Logger_TagFilterBuilder --> Logger_ConfigBuilder : return main builder

' Enrich log data with metadata
class Logger_MetadataHelper {
}

Logger_Controller --> Logger_MetadataHelper : enrich log data

' Strategy pattern
class Logger_ILogWriter {
}
package "Log Writers" {
    class Logger_Writer_Excel {
    }
    class Logger_Writer_Immediate {
    }
}

Logger_Controller --> Logger_ILogWriter : send log data
Logger_ILogWriter <|.. Logger_Writer_Excel
Logger_ILogWriter <|.. Logger_Writer_Immediate

package "StackTrace" {
    ' Manages call stack information
    class Logger_CallStackManager {
    }
    ' Trace procedure start/end, and call methods
    ' Like RAII, catch start via constructor, end via destructor
    ' User instance this class in procedure first scope
    ' e.g. Dim scopeGuard = MyLogger.UsingTracer("ModuleName", "ProcedureName")
    class Logger_ProcedureTracer {
    }
    ' Provides procedure tracer instance
    class Logger_ProcedureTracerProvider {
    }

    Logger_Facade --> Logger_CallStackManager : create
    Logger_Facade::UsingTracer ----> Logger_ProcedureTracerProvider : get traccer
    Logger_ProcedureTracerProvider --> Logger_ProcedureTracer : create
    Logger_ProcedureTracer --> Logger_CallStackManager : update call stack
    Logger_ProcedureTracer --> Logger_Facade::Log : call log \n proc start/end
    Logger_Controller --> Logger_CallStackManager : get call stack
}

remove @unlinked
'===  hidden classes ===
class Logger_LogInfoStruct {
}
class Logger_ConfigStruct {
}
class Logger_DataStruct << (M,66CCFF) Module >> #LightBlue ##black{
    + LoggerLogTag : Enum
}
class Logger_Constants {
}

@enduml
