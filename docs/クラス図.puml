@startuml Class Diagram
title VBA Stack Trace Logger Class Diagram

class Logger_EntryPoint << (M,66CCFF) Module >> #LightBlue ##black {
    + MyLogger() : Logger_Facade
    
    ==
    User use logger through MyLogger().
    This module is **public**,
    and **users use it directly**.
    **e.g. MyLogger.Log "Message"**
}

class Logger_SingletonManager << (M,66CCFF) Module >> {
    - mLogger : Logger_Facade
    + GetMyLogger() : Logger_Facade
    + ReleaseMyLogger()
    
    ==
    When the logger is loaded as an external add-in,
    VBA keeps its member variables alive even after a macro ends.
    **Initialize() automatically resets the logger state,**
    **so each session starts with a clean state.**
}

' Logger API
class Logger_Facade {
    + Initialize() : Logger_ConfigBuilder
    ~ CompleteInitialization(Logger_ConfigStruct)
    + Log(writeMessage, Optional LoggerLogTag)
    + UsingTracer(ModuleName, ProcedureName) : Logger_ProcedureTracer
    + Terminate()
    + Reset()
}

' Logger main logic
' e.g. "Logger_Facade.log" call "Logger_Controller.WriteLog"
class Logger_Controller {
    + Initialize(Logger_ConfigStruct)
    - ValidateConfig()
    + WriteLog(writeMessage, LoggerLogTag)
    + UsingTracer(ModuleName, ProcedureName) : Logger_ProcedureTracer
    + Terminate()
}

' Writer management - extracted from Controller
class Logger_WriterManager {
    + InitializeWriters()
    + CreateWriters(Logger_ConfigStruct)
    + WriteLogToAll(Logger_LogInfoStruct)
    + TerminateWriters()
}

' Log information construction - extracted from Controller
class Logger_LogInfoMetadataHelper {
    + BuildLogInfo() : Logger_LogInfoStruct

    ==
    arguments:
    writeMessage, LoggerLogTag
    Logger_ConfigStruct, currentCallPath
}

' Metadata provider for log information
class Logger_LogMetadataProvider {
    + GetTagName(LoggerLogTag) : String
    + GetTimeStamp() : String
}

' Output filtering - extracted from Controller
class Logger_OutputFilter {
    + ShouldWriteLog() : Boolean
}

' User initialize logger through Logger_Facade.Initialize
' Setting values are defined through builders
' e.g. MyLogger.Initialize.EnabledStckTrace.Build
package "Config Builders" {
    ' Main builder
    class Logger_ConfigBuilder {
        - Private mConfig : Logger_ConfigStruct

        + DisableLogging() : Logger_ConfigBuilder
        + EnableTagFiltering() : Logger_TagFilterBuilder
        ~ SetExcludedTags()
        + EnableStackTrace() : Logger_ConfigBuilder
        + DisableWriteToImmediate() : Logger_ConfigBuilder
        + EnableWriteToExcelSheet() : Logger_ExcelOutputBuilder
        ~ SetOutputExcelSheet()

        + Build()
        - Validate()

        ==
        This is the main builder for logger configuration.
        It allows users to set various options for the logger.
        e.g. MyLogger.Initialize.EnabledStckTrace.Build
    }
    ' Sub builders
    ' When user call "EnableWriteToExcelSheet()",
    ' next chain is only "SetOutputExcelSheet()"
    class Logger_ExcelOutputBuilder {
        ~ SetParentBuilder(Logger_ConfigBuilder)
        + SetOutputExcelSheet(Worksheet) : Logger_ConfigBuilder
        
        ==
        When user call "EnableWriteToExcelSheet()",
        next chain is only "SetOutputExcelSheet()".
    }
    class Logger_TagFilterBuilder {
        ~ SetParentBuilder(Logger_ConfigBuilder)
        + Add(LoggerLogTag) : Logger_TagFilterBuilder
        + Apply() : Logger_ConfigBuilder

        ==
        Create filter tag(s) array.
        e.g. Add(LoggerLogTag.Debug).Apply()
    }
}

' Metadata provider (already defined above)
' Logger_LogMetadataProvider defined in main section

' Strategy pattern
interface Logger_ILogWriter {
    + Initialize()
    + WriteLog(Logger_LogInfoStruct)
    + Terminate()
}
package "Log Writers" {
    class Logger_Writer_Excel {
    }
    class Logger_Writer_Immediate {
    }
}

package "StackTrace" {
    ' Stack trace management - extracted from Controller
    class Logger_StackTraceController {
        + UsingTracer()
        + NotifyProcedureEnter()
        + NotifyProcedureExit()
        + GetCallStackManager()
        + GetCurrentCallPath() : String
    }
    ' Manages call stack information
    class Logger_CallStackManager {
        - mCallNestLevel : Long
        - mCallSite : Collection
        - mCallPath : Collection
        + EnterProcedure(callSite As String)
        + ExitProcedure()
        + GetCurrentCallPath() : String
        - ValidateCallStack()
    }
    ' Trace procedure start/end, and call methods
    ' Like RAII, catch start via constructor, end via destructor
    ' User instance this class in procedure first scope
    ' e.g. Dim scopeGuard = MyLogger.UsingTracer("ModuleName", "ProcedureName")
    class Logger_ProcedureTracer {
        + Initialize()
        - Class_Terminate()

        ==
        Just declare at the top of a procedure.
        **Automatically tracks start and end (like RAII).**
        e.g. Dim scopeGuard = MyLogger.UsingTracer
                        ("ModuleName", "ProcedureName")
    }
    ' Provides procedure tracer instance
    class Logger_ProcedureTracerProvider {
        + CreateTracer()
    }
}

' ====== relationship ======
' === API ===
' Note: User --> Logger_EntryPoint : call MyLogger & get Facade
Logger_EntryPoint --> Logger_SingletonManager : get Facade
Logger_SingletonManager --> Logger_Facade : instantinate
Logger_Facade --> Logger_SingletonManager : call ReleaseMyLogger() \n reset singleton
' === Logger Initilize & build config ===
Logger_Facade --> Logger_ConfigBuilder : Facade.Initialize() \n starts the builder method chain
Logger_ConfigBuilder --> Logger_Facade : build config & call buck \n Facade.CompleteInitialization()
' Main builder
Logger_ConfigBuilder --> Logger_ExcelOutputBuilder : set enabled
Logger_ConfigBuilder --> Logger_TagFilterBuilder : set enabled
Logger_ConfigBuilder --> Logger_ConfigBuilder : set value \n return main builder
' Sub builders
Logger_ExcelOutputBuilder --> Logger_ExcelOutputBuilder : set output sheet
Logger_ExcelOutputBuilder --> Logger_ConfigBuilder : set value \n return main builder
Logger_TagFilterBuilder --> Logger_TagFilterBuilder : create \n tags array
Logger_TagFilterBuilder --> Logger_ConfigBuilder : set value \n rreturn main builder
' === Core Logic ===
Logger_Facade ---> Logger_Controller : call \n Initialize() \n UsingTracer() \n WriteLog() \n Terminate()
Logger_Controller --> Logger_WriterManager : delegate writer management
Logger_Controller --> Logger_LogInfoMetadataHelper : delegate log info construction
Logger_Controller --> Logger_OutputFilter : delegate output filtering
Logger_Controller --> Logger_StackTraceController : delegate stack trace management \n get current call path
Logger_StackTraceController --> Logger_Controller : callback for log output \n (circular reference via callback)
' === Writers ===
Logger_WriterManager --> Logger_ILogWriter : manage lifecycle \n and delegate calls
Logger_ILogWriter <|.. Logger_Writer_Excel
Logger_ILogWriter <|.. Logger_Writer_Immediate
' === stack trace ===
Logger_StackTraceController --> Logger_CallStackManager : manage call stack
Logger_StackTraceController --> Logger_ProcedureTracerProvider : get tracer
Logger_ProcedureTracerProvider --> Logger_ProcedureTracer : create
Logger_ProcedureTracer --> Logger_StackTraceController : notify start/end


Logger_LogInfoMetadataHelper --> Logger_LogMetadataProvider : enrich log data


remove @unlinked
' ===  hidden classes ===
class Logger_LogInfoStruct {
}
class Logger_ConfigStruct {
}
class Logger_DataStruct << (M,66CCFF) Module >> #LightBlue ##black{
    + LoggerLogTag : Enum
}
class Logger_Constants {
}

@enduml
